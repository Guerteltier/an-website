name: Deploy
on:
  push:
    branches: [ main ]
concurrency:
  group: deploy
  cancel-in-progress: true
env:
  PIP_DISABLE_PIP_VERSION_CHECK: yes

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install build frontend
        run: pip install "build>=0.8,<2"
      - name: Build
        run: python -m build --wheel
      - name: Upload as build artifact
        uses: actions/upload-artifact@v3
        with:
          path: dist

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        python-version:
          - "3.10"
          #- 3.11
          #- 3.12
        stack-version:
          - 7.17.5
          #- 8.3.2
        #license:
        #  - basic
        #  - trial
    services:
      redis:
        image: redis/redis-stack-server:6.2.2-v5
        ports:
          - 6379:6379
    steps:
      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: Start Elasticsearch
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: ${{ matrix.stack-version }}
          security-enabled: false
          nodes: 3
          #license: ${{ matrix.license }}
          plugins: |
            analysis-icu
            analysis-phonetic
            ingest-attachment
            mapper-size
            mapper-murmur3
            mapper-annotated-text
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements*.txt
      - name: Install libcurl4-openssl-dev for compiling PycURL
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Install pytest, coverage and html5lib (needed for the tests)
        run: grep -E "^(pytest|coverage|html5lib)" requirements-ci.txt | xargs pip install
      - name: Run pytest
        run: pytest --durations=0 --verbose --cov=an_website --cov-config=.coveragerc tests
      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v3
        with:
          path: .coverage
          name: coverage

  hashes:
    name: Hash files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Hash files
        run: ./scripts/hash_files.py > hashes
      - name: Upload as build artifact
        uses: actions/upload-artifact@v3
        with:
          path: hashes
          name: hashes

  deploy:
    name: Deploy website
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - build
      - tests
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Deploy website
        run: |
          curl -s -S -T *.whl https://asozial.org/api/update/ \
            -H "Authorization: ${{ secrets.UPDATE_API_SECRET }}"

  gh_pages:
    name: GitHub Pages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - deploy
      - hashes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: requirements*.txt
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Move files
        run: |
          mkdir public
          mv hashes/hashes public/hashes.txt
          mv coverage/.coverage .
      - name: Create coverage files
        run: |
          grep "^coverage" requirements-ci.txt | xargs pip install
          coverage report --precision=3 --sort=cover --skip-covered
          coverage html -d "public/coverage"
          coverage json -o "public/coverage.json"
          set -x
          ./generate-badge.sh > public/coverage/badge.svg
          rm public/coverage/.gitignore
      - name: Push hashes and coverage to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_orphan: true
          commit_message: ${{ github.event.head_commit.message }}
