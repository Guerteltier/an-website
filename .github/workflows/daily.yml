name: Daily build
on:
  schedule:
    - cron: "0 0 * * *"
env:
  PIP_DISABLE_PIP_VERSION_CHECK: yes

jobs:

  run_tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install libcurl4-openssl-dev for compiling PycURL
        run: sudo apt-get install -y libcurl4-openssl-dev
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Install pytest, coverage and html5lib (needed for the tests)
        run: grep -E "^(pytest|coverage|html5lib)" requirements-dev.txt | xargs pip install
      - name: Run pytest
        run: pytest --cov=an_website tests
      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v3
        with:
          path: .coverage
          name: coverage

  hash_files:
    name: Hash files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Hash files
        run: ./hash_files.py > hashes
      - name: Upload as build artifact
        uses: actions/upload-artifact@v3
        with:
          path: hashes
          name: hashes

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Create tag
        run: |
          test -z $(git tag --list "v*" --points-at)
          git tag $(python -c "from datetime import datetime; print(datetime.utcnow().strftime('v%y.%m.%d'))")
          git push --tags
      - name: Install build frontend
        run: pip install "build>=0.7,<2"
      - name: Build
        run: python -m build
      - name: Upload as build artifact
        uses: actions/upload-artifact@v3
        with:
          path: dist

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Use black magic
        id: version
        run: echo "::set-output name=TAG_NAME::$(python -c "from datetime import datetime; print(datetime.utcnow().strftime('v%y.%m.%d'))")"
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          files: |
            *.tar.gz
            *.whl

  pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install Twine
        run: pip install "twine~=4.0"
      - name: Run Twine
        run: twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} --verbose *.tar.gz *.whl
