name: Check
on: [ push, pull_request ]
env:
  PIP_DISABLE_PIP_VERSION_CHECK: yes

jobs:

  fix_stupid_mistakes:
    name: Fix stupid mistakes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: Pipfile.lock
      - name: Setup Deno
        uses: denoland/setup-deno@v1
      - name: Install required stuff
        run: grep -E "^(autoflake|black|isort)" requirements-ci.txt | xargs pip install
      - name: Run autoflake
        run: autoflake --recursive --in-place --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys .
      - name: Run isort
        run: isort .
      - name: Run Black
        run: black .
      - name: Install dprint
        run: curl -sSf https://dprint.dev/install.sh | sh -s 0.30.3
      - name: Run dprint
        run: ~/.dprint/bin/dprint fmt --diff
      - name: Build TS & CSS
        run: deno task clean && deno task build
      - name: Generate humans.txt
        run: ./scripts/humans.py
      - name: Push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ¤¦"

  mypy:
    name: mypy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: Pipfile.lock
      - name: Cache type information
        uses: pat-s/always-upload-cache@v2
        with:
          path: .mypy_cache
          key: mypy-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: mypy-${{ github.repository }}-${{ github.ref }}-
      - name: Install libcurl4-openssl-dev for compiling PycURL
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Install mypy + stuff required for checking the tests
        run: grep -E "^(html5lib|mypy|pytest|types-)" requirements-ci.txt | xargs pip install
      - name: Run mypy
        run: mypy -m setup -p an_website -p tests -p scripts

  flake8:
    name: Flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: Pipfile.lock
      - name: Install libcurl4-openssl-dev for compiling PycURL
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Install Flake8 + stuff required for checking the tests
        run: grep -E "^(flake8|html5lib|pep8-naming|pytest)" requirements-ci.txt | xargs pip install
      - name: Run Flake8
        run: flake8

  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: Pipfile.lock
      - name: Cache collected data
        uses: pat-s/always-upload-cache@v2
        with:
          path: ~/.cache/pylint
          key: pylint-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: pylint-${{ github.repository }}-${{ github.ref }}-
      - name: Install libcurl4-openssl-dev for compiling PycURL
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Install Pylint + stuff required for checking the tests
        run: grep -E "^(html5lib|pylint|pytest)" requirements-ci.txt | xargs pip install
      - name: Run Pylint
        run: pylint -d fixme .

  bandit:
    name: Bandit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: Pipfile.lock
      - name: Install Bandit
        run: grep "^bandit" requirements-ci.txt | xargs pip install
      - name: Run Bandit
        run: bandit -c pyproject.toml -r an_website

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: pnpm
      - name: Install ESLint
        run: pnpm install
      - name: Run ESLint
        run: pnpm eslint --report-unused-disable-directives an_website

  tsc:
    name: tsc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: pnpm
      - name: Install tsc
        run: pnpm install
      - name: Run tsc
        run: pnpm tsc

  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: -x -o all
        with:
          check_together: yes
          ignore_paths: venv
          ignore_names: screenfetch
